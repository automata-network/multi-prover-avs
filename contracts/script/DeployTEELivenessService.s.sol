pragma solidity ^0.8.12;

import "forge-std/Script.sol";
import {VmSafe} from "forge-std/Vm.sol";

import {
    TransparentUpgradeableProxy,
    ITransparentUpgradeableProxy
} from "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol";
import {ProxyAdmin} from "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol";
import {EmptyContract} from "./utils/EmptyContract.sol";
import {TEELivenessVerifier} from "../src/core/TEELivenessVerifier.sol";
import {AttestationVerifier} from "../src/core/AttestationVerifier.sol";


contract DeployTEELivenessVerifier is Script {

    function setUp() public {}

    struct Output {
        address SigVerifyLib;
        address PEMCertChainLib;
        address AutomataDcapV3Attestation;
        address TEELivenessVerifier;
        address TEELivenessVerifierImpl;
        string object;
    }

    function getOutputFilePath() private view returns (string memory) {
        string memory env = vm.envString("ENV");
        return string.concat(vm.projectRoot(), "/script/output/tee_deploy_output_", env, ".json");
    }

    function readJson() private returns (string memory) {
        bytes32 remark = keccak256(abi.encodePacked("remark"));
        string memory output = vm.readFile(getOutputFilePath());
        string[] memory keys = vm.parseJsonKeys(output, ".");
        for (uint256 i = 0; i < keys.length; i++) {
            if (keccak256(abi.encodePacked(keys[i])) == remark) {
                continue;
            }
            string memory keyPath = string(abi.encodePacked(".", keys[i]));
            vm.serializeAddress(output, keys[i], vm.parseJsonAddress(output, keyPath));
        }
        return output;
    }

    function saveJson(string memory json) private {
        string memory finalJson = vm.serializeString(json, "remark", "TEELivenessVerifier");
        vm.writeJson(finalJson, getOutputFilePath());
    }

    function verifyQuote() public {
        string memory output = readJson();
        AttestationVerifier attestationVerifier =
            AttestationVerifier(vm.parseJsonAddress(output, ".AttestationVerifier"));
        bytes memory data =
            hex"";
        (bytes memory reportData) = attestationVerifier.verifyAttestation(data);
        console.logBytes(reportData);
    }

    function deployProxyAdmin() public {
        string memory output = readJson();
        vm.startBroadcast();
        ProxyAdmin proxyAdmin = new ProxyAdmin();
        vm.stopBroadcast();
        vm.serializeAddress(output, "ProxyAdmin", address(proxyAdmin));
        saveJson(output);
    }

    function deployEmptyContract() public {
        string memory output = readJson();
        vm.startBroadcast();
        EmptyContract emptyContract = new EmptyContract();
        vm.stopBroadcast();
        vm.serializeAddress(output, "EmptyContract", address(emptyContract));
        saveJson(output);
    }

    function deployAttestationVerifier() public {
        address addr = vm.envAddress("AUTOMATA_DCAP_ATTESTATION");
        string memory output = readJson();
        vm.startBroadcast();
        AttestationVerifier attestationVerifier = new AttestationVerifier(addr);
        vm.stopBroadcast();
        vm.serializeAddress(output, "AttestationVerifier", address(attestationVerifier));
        saveJson(output);
    }

    function deployVerifier() public {
        uint256 version = vm.envUint("VERSION");
        require(version < 255, "version overflowed");

        uint256 attestValiditySecs = vm.envUint("ATTEST_VALIDITY_SECS");

        uint256 maxBlockNumberDiff = vm.envUint("MAX_BLOCK_NUMBER_DIFF");
        string memory output = readJson();
        ProxyAdmin proxyAdmin = ProxyAdmin(vm.parseJsonAddress(output, ".ProxyAdmin"));
        address attestationAddr = vm.parseJsonAddress(output, ".AttestationVerifier");
        address verifierProxyAddr;

        vm.startBroadcast();
        TEELivenessVerifier verifierImpl = new TEELivenessVerifier();
        bytes memory initializeCall;
        if (vm.keyExistsJson(output, ".TEELivenessVerifierProxy") && version > 1) {
            verifierProxyAddr = vm.parseJsonAddress(output, ".TEELivenessVerifierProxy");
            console.log("reuse proxy");
            console.logAddress(verifierProxyAddr);
            console.logAddress(address(proxyAdmin));
        } else {
            console.log("Deploy new proxy");
            EmptyContract emptyContract = new EmptyContract();
            verifierProxyAddr =
                address(new TransparentUpgradeableProxy(address(emptyContract), address(proxyAdmin), ""));
        }
        if (version <= 1) {
            initializeCall = abi.encodeWithSelector(
                TEELivenessVerifier.initialize.selector,
                msg.sender,
                address(attestationAddr),
                maxBlockNumberDiff,
                attestValiditySecs
            );
        } else {
            initializeCall = abi.encodeWithSelector(
                TEELivenessVerifier.reinitialize.selector,
                version,
                msg.sender,
                address(attestationAddr),
                maxBlockNumberDiff,
                attestValiditySecs
            );
        }

        proxyAdmin.upgradeAndCall(
            ITransparentUpgradeableProxy(verifierProxyAddr), address(verifierImpl), initializeCall
        );
        vm.stopBroadcast();

        vm.serializeAddress(output, "TEELivenessVerifierProxy", verifierProxyAddr);
        vm.serializeAddress(output, "TEELivenessVerifierImpl", address(verifierImpl));
        saveJson(output);
    }

    function all() public {
        deployProxyAdmin();
        deployVerifier();
    }

}
